package org.rbbozkurt.composescriptrunner.script

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File

/**
 * Represents the result of a script execution.
 *
 * A script can either execute successfully or result in an error.
 */
sealed class ScriptExecutionResult {
    /**
     * Indicates that the script executed successfully.
     *
     * @param output The standard output generated by the script.
     * @param exitCode The exit code returned by the process (expected to be 0).
     */
    data class Success(val output: String, val exitCode: Int) : ScriptExecutionResult()

    /**
     * Indicates that an error occurred during the script execution.
     *
     * @param errorMessage The error output generated by the script.
     * @param exitCode The exit code returned by the process (non-zero).
     */
    data class Error(val errorMessage: String, val exitCode: Int) : ScriptExecutionResult()
}

/**
 * Executes a given Kotlin script.
 *
 * This suspend function creates a temporary file to store the script content,
 * then uses the Kotlin compiler in script mode (`kotlinc -script`) to execute it.
 * The function runs on the [Dispatchers.IO] context and captures the combined output
 * from the process. Depending on the exit code, it returns either [ScriptExecutionResult.Success]
 * or [ScriptExecutionResult.Error].
 *
 * @param script The Kotlin script code to execute.
 * @return A [ScriptExecutionResult] containing the output and exit code.
 */
suspend fun runScript(script: String): ScriptExecutionResult {
    return withContext(Dispatchers.IO) {
        val tempFile = File.createTempFile("temp_script", ".kts")
        tempFile.writeText(script)

        val process = ProcessBuilder("/usr/bin/env", "kotlinc", "-script", tempFile.absolutePath)
            .redirectErrorStream(true)
            .start()

        val output = process.inputStream.bufferedReader().readText()
        val exitCode = process.waitFor()

        if (exitCode == 0) {
            ScriptExecutionResult.Success(output, exitCode)
        } else {
            ScriptExecutionResult.Error(output, exitCode)
        }
    }
}
